1. What is the return value of the select method below? Why?

[1, 2, 3].select do |num|
  num > 5
  'hi'
end

Answer: The return value of the block is always truthy, since the last expression is 'hi'. Therefore, the return value will be a collection composed of all elements of the collection on which the #select method was called: [1, 2, 3].


2. How does count treat the block's return value? How can we find out?

['ant', 'bat', 'caterpillar'].count do |str|
  str.length < 4
end


Answer: According to the documentation, when Enumerable#count is given a block, the method counts all items for which the block returns a truthy value. In this case, one element returns a truthy value ('caterpillar'), so the method returns 1.


3. What is the return value of reject in the following code? Why?

[1, 2, 3].reject do |num|
  puts num
end

Answer: Enumerator#reject returns an array for all elements for which the block returns a falsey value. Here, the block returns a falsey value for all elements, since 'puts num' returns nil. Therefore, all elements will be included in the returned array: [1, 2, 3].


4. What is the return value of each_with_object in the following code? Why?

['ant', 'bear', 'cat'].each_with_object({}) do |value, hash|
  hash[value[0]] = value
end

Answer: The return value is {'a' => 'ant', 'b' => 'bear', 'c' => 'cat'}. The empty collection {} is passed to the #each_with_object method as an argument, and then populated by the return values of the block. For each element in the array on which #each_with_object is called, the block returns a key-value pair consisting of the first letter of the element => element.


5. What does shift do in the following code? How can we find out?

hash = { a: 'ant', b: 'bear' }
hash.shift

Answer: According to docs, Hash#shift will remove the first hash entry and return a 2-element array containing the removed key and value. Therefore, the hash.shift call will return an array [:a, 'ant], and hash will have only one entry: {:b, 'b'}.


6. What is the return value of the following statement? Why?

['ant', 'bear', 'caterpillar'].pop.size

Answer: Array#pop removes and returns trailing elements. When no argument is given, it removes and returns the last element. Here, #pop removes and returns 'caterpillar'. The chained #size call then returns the size of the 'caterpillar' string, which is 11.


7. What is the block's return value in the following code? How is it determined? Also, what is the return value of any? in this code and what does it output?

[1, 2, 3].any? do |num|
  puts num
  num.odd?
end

Answer: The block returns a value based on the last statement evaluated. Here, that statement is num.odd? which evaluates as true for the first two elements of the array, 1 and 3. Enumerable#any returns true if the block ever returns a value other than false or nil, so here #any returns true.

After trying this in irb, it did indeed return true but I was surprised it printed only 1, and not 2 or 3. I think the reason is that the block returns true after 1 is passed to it, and at that point #any short-circuits because it only needs the block to return a truthy value one time in order for #any to return true. So it prints 1, returns true and stops there.


8. How does take work? Is it destructive? How can we find out?

arr = [1, 2, 3, 4, 5]
arr.take(2)

Answer: According to docs, Enumerable#take returns the first n elements of enum. From the way the docs are written, it does not appear to be destructive. In the example given, it returns [1, 2].


9. What is the return value of map in the following code? Why?

{ a: 'ant', b: 'bear' }.map do |key, value|
  if value.size > 3
    value
  end
end

Answer: According to docs, Enumerable#map returns a new array after executing the block once on each element in the original collection. Here it appears that the block is written in a way that will function much like the #select method. The returned array will be ['bear'].

After reading the LS answer, I think what I missed here is that #map always performs transformation depending on the return value of the block. So for the first entry of the hash, it returns nil since value.size > 3 does not evaluate to true.


10. What is the return value of the following code? Why?

[1, 2, 3].map do |num|
  if num > 1
    puts num
  else
    num
  end
end

Answer: [1, nil, nil]. The block returns 1 for the first element since it returns num. For the last two elements it returns nil, since the if statement evaluates to true and 'puts num' returns nil.

